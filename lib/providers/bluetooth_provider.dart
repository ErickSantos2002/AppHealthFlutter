import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import '../services/bluetooth_manager.dart';

/// üîπ Estado global para gerenciar a conex√£o Bluetooth
class BluetoothState {
  final bool isConnected;
  final BluetoothDevice? connectedDevice;
  final BluetoothCharacteristic? writableCharacteristic;
  final BluetoothCharacteristic? notifiableCharacteristic;

  BluetoothState({
    required this.isConnected,
    this.connectedDevice,
    this.writableCharacteristic,
    this.notifiableCharacteristic,
  });

  /// üîÑ Atualiza o estado sem modificar a refer√™ncia do provider
  BluetoothState copyWith({
    bool? isConnected,
    BluetoothDevice? connectedDevice,
    BluetoothCharacteristic? writableCharacteristic,
    BluetoothCharacteristic? notifiableCharacteristic,
  }) {
    return BluetoothState(
      isConnected: isConnected ?? this.isConnected,
      connectedDevice: connectedDevice ?? this.connectedDevice,
      writableCharacteristic: writableCharacteristic ?? this.writableCharacteristic,
      notifiableCharacteristic: notifiableCharacteristic ?? this.notifiableCharacteristic,
    );
  }
}

/// üîπ Notifier que gerencia o estado do Bluetooth e faz interface com o BluetoothManager
class BluetoothNotifier extends StateNotifier<BluetoothState> {
  final BluetoothManager _bluetoothManager;

  BluetoothNotifier(Ref ref)
      : _bluetoothManager = BluetoothManager(ref),
        super(BluetoothState(isConnected: false));

  /// üîπ Conecta a um dispositivo e atualiza o estado
  Future<bool> connectToDevice(BluetoothDevice device) async {
    bool success = await _bluetoothManager.connectToDevice(device);
    if (success) {
      state = state.copyWith(isConnected: true, connectedDevice: device);
    }
    return success;
  }

  /// üîπ Atualiza as caracter√≠sticas BLE quando forem descobertas
  void setCharacteristics({
    BluetoothCharacteristic? writable,
    BluetoothCharacteristic? notifiable,
  }) {
    if (notifiable != null && notifiable != state.notifiableCharacteristic) {
      print("üîÑ [bluetoothProvider] Atualizando caracter√≠stica de notifica√ß√£o global: ${notifiable.uuid}");
      state = state.copyWith(notifiableCharacteristic: notifiable);
    }

    if (writable != null && writable != state.writableCharacteristic) {
      print("‚úçÔ∏è [bluetoothProvider] Atualizando caracter√≠stica de escrita global: ${writable.uuid}");
      state = state.copyWith(writableCharacteristic: writable);
    }
  }

  Future<void> ensureNotificationsActive() async {
    if (state.notifiableCharacteristic != null) {
      await state.notifiableCharacteristic!.setNotifyValue(true);
      print("üîî Notifica√ß√µes BLE reativadas!");
    } else {
      print("‚ö†Ô∏è Nenhuma caracter√≠stica de notifica√ß√£o encontrada no BluetoothProvider!");
    }
  }

  /// üîπ Obt√©m informa√ß√µes do dispositivo ap√≥s conex√£o
  Future<void> fetchDeviceInfo() async {
    if (!state.isConnected || state.writableCharacteristic == null) {
      print("‚ùå Dispositivo n√£o conectado ou caracter√≠stica de escrita indispon√≠vel!");
      return;
    }

    print("üì§ Enviando comandos para obter informa√ß√µes do dispositivo...");
    sendCommand("A01", "INFORMATION", 0); // Vers√£o do Firmware
    sendCommand("A03", "0", 0); // Contagem de Uso
    sendCommand("A04", "0", 0); // √öltima Calibra√ß√£o
  }

  /// üîπ Envia um comando para o dispositivo
  Future<void> sendCommand(String command, String data, int battery) async {
    if (state.writableCharacteristic == null) {
      print("‚ùå Caracter√≠stica de escrita n√£o dispon√≠vel!");
      return;
    }
    await _bluetoothManager.sendCommand(command, data, battery);
  }

  /// üîπ Restaura as caracter√≠sticas BLE (Corrigindo o erro)
  Future<void> restoreCharacteristics() async {
    if (state.connectedDevice != null) {
      print("‚ôªÔ∏è Restaurando caracter√≠sticas BLE...");
      await _bluetoothManager.discoverCharacteristics(state.connectedDevice!);
    }
  }

  /// üîπ Desconecta o dispositivo e reseta o estado
  Future<void> disconnect() async {
    await _bluetoothManager.disconnectDevice();
    state = BluetoothState(isConnected: false);
  }
}

/// üîπ Criamos um provider global para o Bluetooth
final bluetoothProvider = StateNotifierProvider<BluetoothNotifier, BluetoothState>(
  (ref) => BluetoothNotifier(ref),
);
